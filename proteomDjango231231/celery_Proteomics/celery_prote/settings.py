"""
Django settings for celery_prote project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from celery.schedules import crontab
from corsheaders.defaults import default_headers
import os
from pathlib import Path
import datetime
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR2 = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(BASE_DIR)
print(BASE_DIR2)
import environ
from celery.schedules import crontab

#import post.tasks
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
# reading .env file
environ.Env.read_env(
    os.path.join(BASE_DIR, '.env')
)

# False if not in os.environ
DEBUG = env('DEBUG')

DEBUG = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(ssysiep$#gqzx%njv07h2=))1oxw8y^%^kpjqm(hqri=z62ma'

# SECURITY WARNING: don't run with debug turned on in production!
CORS_ORIGIN_WHITELIST= ['http://localhost:3000','http://127.0.0.1:5616','http://riceproteome.plantprofile.net'] 

ALLOWED_HOSTS = ['127.0.0.1','*']
#



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'proteom',
    'corsheaders',
    'markdownx',
    'django_spaghetti',
    'admin_import',
    'django_celery_results'    ,
    'rest_framework_jwt',
    'post',
    'celery_progress',
    'django_extensions',
    'django_celery_beat', 
    
]
GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
}
#CELERY_BEAT_SCHEDULE 해석 task.upload를 15분마다 실행해라
CELERY_BEAT_SCHEDULE = {
    'add-every-monday-morning': {
       'task': 'post.tasks.printing',
        'schedule':crontab(minute='*/15') , 
        'args': (16, 16),
   },
}
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

#crontab(minute='*/15') crontab(minute=0, hour='*/3')
#AUTH_USER_MODEL = 'proteom.User'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
]

#CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True




ROOT_URLCONF = 'celery_prote.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
         'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'celery_prote.wsgi.application'


# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),#db.sqlite3
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
APPEND_SLASH = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

CELERY_TIMEZONE = 'Asia/Seoul'
CELERY_ENABLE_UTC = False


CELERY_BROKER_URL = 'amqp://rabbitmq'
#guest:guest@127.0.0.1
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'django-db'
#'django-db
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

REST_FRAMEWORK = {    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',    
'PAGE_SIZE': 100,
'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  #인증된 회원만 액세스 허용
        'rest_framework.permissions.AllowAny',         #모든 회원 액세스 허용
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': ( #api가 실행됬을 때 인증할 클래스를 정의해주는데 우리는 JWT를 쓰기로 했으니
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication', #이와 같이 추가해준 모습이다.
        'rest_framework.authentication.SessionAuthentication',
    ),}

JWT_AUTH = { # 추가
   'JWT_SECRET_KEY': SECRET_KEY,
   'JWT_ALGORITHM': 'HS256',
   'JWT_VERIFY_EXPIRATION' : True, #토큰검증
   'JWT_ALLOW_REFRESH': True, #유효기간이 지나면 새로운 토큰반환의 refresh
   'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=200),  # Access Token의 만료 시간
   'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=3), # Refresh Token의 만료 시간
   'JWT_RESPONSE_PAYLOAD_HANDLER': 'celery_prote.custom_responses.my_jwt_response_handler'
}

#crontab(minute=0, hour=0)

CELERY_WORKER_MAX_TASKS_PER_CHILD = 100
CELERY_WORKER_MAX_MEMORY_PER_CHILD = 12000#12MB
CELERY_RESULT_EXPIRES =datetime.timedelta(seconds=10)
#upload,getDEP,getGO,getNETWORK
'''CELERY_BEAT_SCHEDULE = {
    "upload": {
        "task": "post.tasks.upload",
        "schedule": crontab(minute=0, hour=0),
    },
    "getDEP": {
        "task": "post.tasks.getDEP",
        "schedule": crontab(minute=0, hour=0),
    },
    "getGO": {
        "task": "post.tasks.getGO",
        "schedule": crontab(minute=0, hour=0),
    },
    "getNETWORK": {
        "task": "post.tasks.getNETWORK",
        "schedule": crontab(minute=0, hour=0),
    },
}'''



#CELERY_RESULT_EXPIRES=datetime.timedelta(seconds=300)#5분
#CELERYD_MAX_TASKS_PER_CHILD=200
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = '' # ex) bum752@gmail.com
EMAIL_HOST_PASSWORD = '' # ex) P@ssw0rd
SERVER_EMAIL = '' # ex) bum752@gmail.com 
DEFAULT_FROM_MAIL = '' # ex) bum752


